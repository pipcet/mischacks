; high-precision time, as a fraction of seconds since the epoch.
(define (current-stime)
  (if (boundp 'current-ntime)
      (/ (current-ntime) 1000000000)
      (/ (current-utime) 1000000)))

(if (and (eq (screen-height) 768))
    (progn (set 'panel-left 1/7)
	   (set 'panel-right 1/9)
	   (set 'panel-top 1/6)
	   (set 'panel-bot 1/6))
  (progn (set 'panel-left 1/6)
	   (set 'panel-right 1/6)
	   (set 'panel-top 1/6)
	   (set 'panel-bot 1/6)))

(define (start-screen number mark pos)
  (message (concat "xterm -class UXTerm -u8 -s -xrm '*metaSendsEscape: true' -fg black -bg white +bc +sb -T Screen"
		  (if (eq number 1) "" (number->string number))

		  " -e sh -c 'sleep 1; exec screen -Ux' -fn '-adobe-courier-medium-r-normal--10-100-75-75-m-60-iso8859-15' &")))

; really i want subwindow management in:
;  screen: screen numbers
;  xterm: pass on
;  Emacs: buffer windows(?)
;  browser: tabs
;  gimp?
;
; screen is the test case: any number of xterms can have any number of screens open, and display all or part of them.
;
; todo:
; popup-time is both difficult and relies on stupid time-before-p.
; really as long as you focus-switch using the same mark, rotate the list
;  a) pushing to the back windows that have been popped up less recently (exponential focus decay?)
;  b) pushing to the back windows that are "skipped"
;  c) pulling any activated window to the front
;  d) like a), but assign a value that remembers valuable windows forever.
; we do c), b) would work, a) would be overkill, d) I don't know a good algorithm for.

(define pip-last-mark '())
(define pip-last-outtime '())
(define pip-current-intime '())
(define pip-current-mark '())


(define (unfocus-marked w)
  (let* ((m (or (window-get w 'markmark)
		(window-get w 'submark))))
    (when m
      (set 'pip-last-mark m)
      (set 'pip-last-outtime (current-stime)))
    (if 'pip-current-intime
	(if '() (message (concat "window " (window-name w)
			 " was focussed for "
			 (number->string (floor (* 1000 (- pip-last-outtime pip-current-intime))))
			 " milliseconds"))))))


(define (focus-marked w)
  (let* ((m (or (window-get w 'markmark)
		(window-get w 'submark))))
    (when m
      (set 'pip-current-mark m)
      (set 'pip-current-intime (current-stime)))))

(mapcar (lambda (h) (remove-hook 'focus-in-hook h)) (filter (lambda (s) (equal (closure-name s) "focus-marked")) focus-in-hook ))
(mapcar (lambda (h) (remove-hook 'focus-out-hook h)) (filter (lambda (s) (equal (closure-name s) "unfocus-marked")) focus-out-hook ))

(add-hook 'focus-in-hook focus-marked #t)
(add-hook 'focus-out-hook unfocus-marked #t)

; after-restacking-hook

(define (cutoffstack haystack needle)
  (if (equal (car haystack) needle)
      '()
      (cons (car haystack) (cutoffstack (cdr haystack) needle))))

(define (listquarters111b quarter x y)
  (let* ((dim (interpret-screen-piece quarter)))
    (if (and (< (car dim) x)
	     (< (cadr dim) y)
	     (>= (+ (car dim) (caddr dim)) x)
	     (>= (+ (cadr dim) (cadddr dim)) y))
	(list quarter)
	'())))

(define (listquarters111c quarter x y)
  (listquarters111b quarter
		    (/ x (car (current-head-dimensions)))
		    (/ y (cdr (current-head-dimensions)))))

(define (listquarters111 quarter x y)
  (if (or (and (equal quarter 'topleft)
	       (< x 830)
	       (< y 500))
	  (and (equal quarter 'topright)
	       (>= x 850)
	       (< y 500))
	  (and (equal quarter 'botleft)
	       (< x 830)
	       (>= y 524))
	  (and (equal quarter 'botright)
	       (>= x 850)
	       (>= y 524)))
      (list quarter)
      '()))

(define (listquarters11 window quarter)
  (let* ((p (window-position window))
	 (d (window-dimensions window))
	 (x0 (car p))
	 (y0 (cdr p))
	 (x1 (+ (car p) (car d)))
	 (y1 (+ (cdr p) (cdr d))))
    ; XXX fails if window is large and covers
    (append (listquarters111 quarter x0 y0)
	    (listquarters111 quarter x0 y1)
	    (listquarters111 quarter x1 y0)
	    (listquarters111 quarter x1 y1)
	    (listquarters111 quarter (/ (+ x0 x1) 2) (/ (+ y0 y1) 2)
	    ))))

(define (listquarters1 window checklist)
  (if checklist
      (append (listquarters11 window (car checklist))
	      (listquarters1 window (cdr checklist))
      '())))

(define (listquarters stacklist checklist)
  (if stacklist
      (append (listquarters1 (car stacklist) checklist)
	      (listquarters  (cdr stacklist) checklist))
      '()))


(define last-arh-at (current-stime))

(define (arh)
  (let* ((w (get-window-by-name-re "MPla"))
	 (o (if w (window-obscured w) '())))
    (if o
	(let* ((stack (cutoffstack (stacking-order) w))
	       (quarters (listquarters stack '(topleft topright botright botleft)))
	       (oldtop (car stack))
	       (allquarters (and stack
				 (equal (length (listquarters1 (car stack) '(topleft topright botright botleft))))))
	       (freequarters (append (if (grep 'topleft  quarters) '() '(topleft))
				     (if (grep 'topright quarters) '() '(topright))
				     (if (grep 'botleft  quarters) '() '(botleft))
				     (if (grep 'botright quarters) '() '(botright))))
		  (quarter (if freequarters
			       (car freequarters)
			       (if quarters
				   (last quarters)
				   'topleft))))
	  (when (> (- (current-stime) last-arh-at)
		 (/ 1 100))

	    (set 'last-arh-at (current-stime))
	    (if freequarters
		(move-resize-window-superuseful w quarter (/ 45 1000)))
	    (if (not allquarters)
		(progn (raise-window w)
		       (raise-window oldtop))))))))

(add-hook 'after-restacking-hook arh)

(define (awh w)
  (let* ((name (window-name w))
	 (list window-creation-positions)
	 (entry (if name (car (filter (lambda (e) (string-match (car e) name)) list))))
	 (scrpos (cadr entry))
	 (scrpan (caddr entry)))
    (progn
      (if entry
	(message (concat "New Window: "
			 name))
	(message (concat "Unknown New Window: "
			 name
			 " ")))
      (if (and entry scrpos)
	  (move-resize-window-useful w scrpos))
      (if (and entry scrpan)
	  ; XXX toggle moveresizes
	  (window-toggle-panel w scrpan)
	  (window-toggle-panel w '()))
      )))

(if 0 (progn (add-hook 'a 'b) (set 'after-add-window-hook (filter (lambda (e) (not (equal (closure-name e) "awh"))) after-add-window-hook)))
(set 'add-window-hook (append (filter (lambda (e) (not (equal (closure-name e) "awh"))) add-window-hook) (list awh))))
(set 'add-window-hook (filter (lambda (e) (not (equal (closure-name e) "awh"))) add-window-hook))
(set 'after-add-window-hook (append (filter (lambda (e) (not (equal (closure-name e) "awh"))) after-add-window-hook) (list awh)))



(define (check-new-window-marked w)
  (let* ((name (window-name w))
	 (list marked-window-creation)
	 (entry (car (filter (lambda (e) (string-match (cadr e) name))
			     list))))
    (if entry (progn (show-message (concat "got new window for entry " (number->string (car entry))))
		     ))))



(define (create-marked-window mark)
  (let* ((list marked-window-creation)
	 (entry (car (filter (lambda (e) (eq (car e) mark)) list))))
    (if entry (let* ((regex (cadr entry))
		     (starter (caddr entry))
		     (window (get-window-by-name-re regex)))
		(if window (mark-window window mark)
		  (progn (show-message (concat "running starter for mark " (number->string mark)))
			 (starter mark)))))))

(define (for-marked-window2 mark code)
  (mapcar code (filter (lambda (w) (eq (window-get w 'markmark) mark))
		       (managed-windows))))

; user> (time-later-p  156102049 156104164)
;*** Bad argument: #<subr time-later-p>, 156102049, 1

; huh?
(define (for-marked-window3 mark code)
  (let* ((m0 (filter (lambda (w) (eq (window-get w 'markmark) mark))
		     (managed-windows)))
	 (m1 (sort m0 (lambda (w1 w2) (if (eq (window-get w1 'popup-time) '())
					  t
					  (if (eq (window-get w2 'popup-time) '())
					      '()
					    (> (window-get w2 'popup-time)
					       (window-get w1 'popup-time))))))))
    (progn (if (eq m1 '()) (create-marked-window mark))
	   (if (car m1) (code (car m1))))))

(define (for-submarked-window mark code)
  (let* ((m0 (filter (lambda (w) (eq (window-get w 'submark) mark))
		     (managed-windows)))
	 (m1 (sort m0 (lambda (w1 w2) (or (not (window-get w1 'popup-time))
					  (> (window-get w2 'popup-time)
					     (window-get w1 'popup-time)))))))
    (mapcar (lambda (w) (progn (message (concat "w: " (window-name w))) (code w))) m1)))

(define (for-marked-window-in mark windows code)
  (if windows
      (let* ((w (car windows))
	     (prop (if w (window-get w 'markmark)))
	     (rest (cdr windows)))
	(if (and w (eq prop mark))
	    (code w))
	(for-marked-window-in mark rest code))))

(define (for-marked-window mark code)
  (for-marked-window-in mark (managed-windows) code))

(define (mark-window window mark)
  (if (eq (window-get window 'markmark) mark)
      (window-put window 'markmark ())
      (window-put window 'markmark mark)))

(define (subsumed-p x y)
  (let* ((leftx (or (eq x 'left)
		    (eq x 'leftright)))
	 (rightx (or (eq x 'right)
		     (eq x 'leftright)))
	 (topx (or (eq x 'top)
		   (eq x 'topbot)))
	 (botx (or (eq x 'bot)
		   (eq x 'topbot))))
    (or (not leftx) lefty)))

; (get-window-by-name-re "GNU Image Manipulation")
; user> (get-window-by-name-re "Toolbox")
;user> (get-window-by-name-re "Layers")

(define (grep m args)
  (filter (lambda (x) (eq x m))
	  args))
(define (grepx m args)
  (filter (lambda (x) (not (eq x m)))
	  args))

(define (grepp p args)
  (filter (lambda (x) (grep x p))
	  args))

(define (greppx p args)
  (filter (lambda (x) (not (grep x p)))
	  args))

(define (window-panelled-p window dir)
  (let* ((p (window-get window 'pip-panel))
	 (lp (grep dir p)))
    lp))

(define (window-unpanel window dirs)
  (let* ((p (window-get window 'pip-panel))
	 (lp (grepp dirs p)))
    (if lp
	(window-put window 'pip-panel (greppx dirs p))
      ())))

(define (window-panel window dirs)
  (let* ((p (window-get window 'pip-panel))
	 (lp (grepp dirs p)))
    (if (not lp)
	(window-put window 'pip-panel (append p dirs)))))

(define (window-toggle-panel window dirs)
  (let* ((p (window-get window 'pip-panel))
	 (lp (grepp dirs p)))
    (progn (if lp
	       (window-unpanel window dirs)
	     (window-panel window dirs))
	   (if (window-get window 'pip-part)
	       (move-resize-window-useful window (window-get window 'pip-part))))))

; for dir in left right bot top; do echo "(define (window-panel-$dir window) (window-panel window '($dir)))"; echo "(define (window-unpanel-$dir window) (window-unpanel window '($dir)))"; echo "(define-command 'window-panel-$dir window-panel-$dir #:spec \"%W\")"; echo "(define-command 'window-unpanel-$dir window-panel-$dir #:spec \"%W\")"; echo "(define (window-toggle-panel-$dir window) (window-toggle-panel window '($dir)))"; echo "(define-command 'window-toggle-panel-$dir window-toggle-panel-$dir #:spec \"%W\")"; done

(define (window-panel-left window) (window-panel window '(left)))
(define (window-unpanel-left window) (window-unpanel window '(left)))
(define-command 'window-panel-left window-panel-left #:spec "%W")
(define-command 'window-unpanel-left window-panel-left #:spec "%W")
(define (window-toggle-panel-left window) (window-toggle-panel window '(left)))
(define-command 'window-toggle-panel-left window-toggle-panel-left #:spec "%W")
(define (window-panel-right window) (window-panel window '(right)))
(define (window-unpanel-right window) (window-unpanel window '(right)))
(define-command 'window-panel-right window-panel-right #:spec "%W")
(define-command 'window-unpanel-right window-panel-right #:spec "%W")
(define (window-toggle-panel-right window) (window-toggle-panel window '(right)))
(define-command 'window-toggle-panel-right window-toggle-panel-right #:spec "%W")
(define (window-panel-bot window) (window-panel window '(bot)))
(define (window-unpanel-bot window) (window-unpanel window '(bot)))
(define-command 'window-panel-bot window-panel-bot #:spec "%W")
(define-command 'window-unpanel-bot window-panel-bot #:spec "%W")
(define (window-toggle-panel-bot window) (window-toggle-panel window '(bot)))
(define-command 'window-toggle-panel-bot window-toggle-panel-bot #:spec "%W")
(define (window-panel-top window) (window-panel window '(top)))
(define (window-unpanel-top window) (window-unpanel window '(top)))
(define-command 'window-panel-top window-panel-top #:spec "%W")
(define-command 'window-unpanel-top window-panel-top #:spec "%W")
(define (window-toggle-panel-top window) (window-toggle-panel window '(top)))
(define-command 'window-toggle-panel-top window-toggle-panel-top #:spec "%W")

; end bash

(define (window-panel-leftright window) (window-panel window '(left right)))
(define (window-unpanel-leftright window) (window-unpanel window '(left right)))
(define (window-toggle-panel-leftright window) (window-toggle-panel window '(left right)))
(define-command 'window-panel-leftright window-panel-leftright #:spec "%W")
(define-command 'window-unpanel-leftright window-unpanel-leftright #:spec "%W")
(define-command 'window-toggle-panel-leftright window-toggle-panel-leftright #:spec "%W")


(define (popup-sub-window window)
  (progn (show-window window)
	 (window-put window 'popup-time (x-server-timestamp))
	 ; should this be (activate-window)? raise-window -> activate-window
	 (raise-window window)))
(define (popup-window window)
  (progn (show-window window)
	 (window-put window 'popup-time (x-server-timestamp))
	 (activate-window window)
	 (raise-window window)
	 (set-input-focus window)))

(define (popup-toggle-window window)
  (if (window-on-top-p window)
      (progn (lower-window window)
	     (hide-window window))
      (progn (show-window window)
	     (raise-window window)
	     (set-input-focus window))))

; there's some sort of anti-hanging code that disables (grab-keyboard w nil nil / nil t nil to time out)

(define (popup-marked-window mark)
  (let* ((w (input-focus))
	 (already (eq (window-get w 'markmark) mark))
	 )
    (if already (window-put w 'popup-time (x-server-timestamp)))
    (for-submarked-window mark (lambda (w) (popup-sub-window w)))
    (for-marked-window3 mark (lambda (w) (popup-window w)))))



(define (rel-cursor-position w)
  (let* ((x (car (window-position w)))
	 (y (cdr (window-position w)))
	 (width  (car (window-frame-dimensions w)))
	 (height (cdr (window-frame-dimensions w)))
	 (cx (car (query-pointer)))
	 (cy (cdr (query-pointer)))
	 (relx (/ (- cx x) width))
	 (rely (/ (- cy y) height)))
    (if (and (>= relx 0)
	     (<= relx 1)
	     (>= rely 0)
	     (<= rely 1))
	(cons relx rely))))

(define (abs-cursor-position w rcp)
  (let* ((relx (car rcp))
	 (rely (cdr rcp))
	 (x (car (window-position w)))
	 (y (cdr (window-position w)))
	 (width  (car (window-frame-dimensions w)))
	 (height (cdr (window-frame-dimensions w)))
	 (cx (truncate (+ x (* width relx))))
	 (cy (truncate (+ y (* height rely)))))
    (cons cx cy)))

(define (move-resize-window-and-frame-to win x y w h)
  (let* ((fdim (window-frame-dimensions win))
	 (dim (window-dimensions win))
	 (foff (window-frame-offset win))
	 (fx (car foff))
	 (fy (cdr foff))
	 (fw (- (car fdim) (car dim)))
	 (fh (- (cdr fdim) (cdr dim))))

    (message (concat "x " (number->string x) " y " (number->string y)
		     " w " (number->string w) " h " (number->string h)))
    ;; window position includes frame, but window dimensions don't? O-kay, sawfish person, that makes sense.
    (move-resize-window-to win x y (- w fw) (- h fh))
    (if (not (and (equal (window-frame-dimensions win) (cons w h))
		  (equal (window-position win) (cons x y))
		  ))
	(message "error!"))
			 ))

(define (move-resize-window-relpos2 w x y width height pl)
  "Move and resize the window to the position specified in relative coordinates using a of panels to leave free"
  (let* ((rwidth (car (current-head-dimensions)))
	 (rheight (cdr (current-head-dimensions)))
	 (roffx 0)
	 (roffy 0)
	 (awidth (* rwidth (- 1 (+ (if (grep 'left pl)
				     panel-left
				   0)
				 (if (grep 'right pl)
				     panel-right
				   0)))))
	 (aheight (* rheight (- 1 (+ (if (grep 'top pl)
				     panel-top
				   0)
				 (if (grep 'bot pl)
				     panel-bot
				   0)))))
	 ;; (aoffx (+ roffx
	 ;;	   (* rwidth (+ (if (grep 'left pl) panel-left 0)))
	 ;;	   (car (window-frame-offset w))))
	 ;; (aoffy (+ roffy
	 ;;	   (* rheight (+ (if (grep 'top pl) panel-top 0)))
	 ;;	   (cdr (window-frame-offset w))))
	 (aoffx 0)
	 (aoffy 0)
	 (absx (truncate (+ 1 (truncate (ceiling (+ aoffx (* x awidth)))))))
	 (absy (truncate (+ 1 (truncate (ceiling (+ aoffy (* y aheight)))))))
	 (absh (truncate (- (truncate (floor (* height aheight))) 1)))
	 (absw (truncate (- (truncate (floor (* width awidth))) 1)))
	 (rcp (rel-cursor-position w)))
    ;(set-frame-style w ())
    (move-resize-window-and-frame-to w absx absy absw absh)
    (when rcp (let* ((acp (abs-cursor-position w rcp))
		     (cx (car acp))
		     (cy (cdr acp)))
		(warp-cursor cx cy)))
    w))

(define (move-resize-window-relpos w x y width height)
  "Move and resize the window to the position specified in relative coordinates"
  (let* ((absx (+ 1 (truncate (ceiling (* x (car (current-head-dimensions)))))
		  (car (current-head-offset))))
	 (absy (+ 1 (truncate (ceiling (* y (cdr (current-head-dimensions)))))
		  (cdr (current-head-offset))))
	 (absh (- (truncate (floor   (* height (cdr (current-head-dimensions))))) 1))
	 (absw (- (truncate (floor   (* width (car (current-head-dimensions))))) 1))
	 (rcp (rel-cursor-position w)))
    (set-frame-style w ())
    (move-resize-window-and-frame-to w absx absy absw absh)
    (when rcp (let* ((acp (abs-cursor-position w rcp))
		     (cx (car acp))
		     (cy (cdr acp)))
		(warp-cursor cx cy)))
    w))



(define (interpret-screen-piece p)
  (cond ((eq p 'left)
	 '(0 0 1/2 1))
	((eq p 'right)
	 '(1/2 0 1/2 1))
	((eq p 'top)
	 '(0 0 1 1/2))
	((eq p 'bot)
	 '(0 1/2 1 1/2))
	((eq p 'botquart)
	 '(0 1/4 1 3/4))
	((eq p 'topthreequart)
	 '(0 0 1 3/4))
	((eq p 'topleft)
	 '(0 0 1/2 1/2))
	((eq p 'topright)
	 '(1/2 0 1/2 1/2))
	((eq p 'botleft)
	 '(0 1/2 1/2 1/2))
	((eq p 'botright)
	 '(1/2 1/2 1/2 1/2))
	((eq p 'screen)
	 '(0 0 1 1))
	((eq p 'leftpan)
	 (list 0 0 panel-left 1))
	((eq p 'rightpan)
	 (list (- 1 panel-right) 0 panel-right 1))
	((eq p 'butleftrightpan)
	 '(1/6 0 4/6 1))
	;; ((eq p 'pos1)
	;;  '(0 1/2 512/1920 1/2))
	;; ((eq p 'pos2)
	;;  '(512/1920 1/2 896/1920 1/2))
	;; ((eq p 'pos3)
	;;  '(1408/1920 1/2 512/1920 1/2))
	;; ((eq p 'pos4)
	;;  '(0 0 512/1920 1))
	;; ((eq p 'pos5)
	;;  '(512/1920 0 896/1920 1))
	;; ((eq p 'pos6)
	;;  '(1408/1920 0 512/1920 1))
	;; ((eq p 'pos7)
	;;  '(0 0 512/1920 1/2))
	;; ((eq p 'pos8)
	;;  '(512/1920 0 896/1920 1/2))
	;; ((eq p 'pos9)
	;;  '(1408/1920 0 512/1920 1/2))
	((eq p 'pos1)
	 '(0 1/2 1/3 1/2))
	((eq p 'pos2)
	 '(1/3 1/2 1/3 1/2))
	((eq p 'pos3)
	 '(2/3 1/2 1/3 1/2))
	((eq p 'pos4)
	 '(0 0 1/3 1))
	((eq p 'pos5)
	 '(1/3 0 1/3 1))
	((eq p 'pos6)
	 '(2/3 0 1/3 1))
	((eq p 'pos7)
	 '(0 0 1/3 1/2))
	((eq p 'pos8)
	 '(1/3 0 2/3 1/2))
	((eq p 'pos9)
	 '(2/3 0 1/3 1/2))
	(t
	 '(0 0 0 0))))

;# how do I set global flags?

(define (move-resize-window-superuseful w p margin)
  "Move and resize the window to a specific part of the screen specified by a symbol"
  (let* ((coord (interpret-screen-piece p))
	 (x (car coord))
	 (y (cadr coord))
	 (width (caddr coord))
	 (height (cadddr coord)))
    (window-put w 'pip-part p)
    (if margin
	(move-resize-window-relpos2 w (+ margin x) y (- width (* 2 margin)) height (window-get w 'pip-panel))
	(move-resize-window-relpos2 w x y width height (window-get w 'pip-panel)))))


(define (move-resize-window-useful w p)
  "Move and resize the window to a specific part of the screen specified by a symbol"
  (let* ((coord (interpret-screen-piece p))
	 (x (car coord))
	 (y (cadr coord))
	 (width (caddr coord))
	 (height (cadddr coord)))
    (window-put w 'pip-part p)
    (move-resize-window-relpos2 w x y width height (window-get w 'pip-panel))))

(when 0
  (define (move-resize-window-X w)
	  (move-resize-window-useful w 'X))
  )

(define (set-window-type-resize win type)
  (let* ((dim (window-dimensions win))
	 (pos (window-position win))
	 (fdim0 (window-frame-dimensions win))
	 (foff0 (window-frame-offset win)))
    (set-window-type win type)
    (let* ((fdim1 (window-frame-dimensions win))
	   (foff1 (window-frame-offset win)))
      (move-resize-window-and-frame-to win
				       (car pos)
				       (cdr pos)
				       (car fdim0)
				       (cdr fdim0)))))


(mapc (lambda (type)
	(define-command (intern (concat "set-frame-resize:" (symbol-name type)))
	  (lambda (w) (set-window-type-resize w type)) #:spec "%W"))
      '(default transient shaped shaped-transient unframed))

; (for a in screen left right top bot leftpan rightpan toppan botpan butleftpan butrightpan butleftrightpan buttopbotpan topleft topright botleft botright topthreequart; do echo "(define (move-resize-window-$a w) (move-resize-window-useful w '$a))"; echo "(define-command 'move-resize-window-$a move-resize-window-$a #:spec \"%W\")"; done
; for a in a o e i 0 1 2 3 4 5 6 7 8 9; do echo "(define (mark-window-$a w) (mark-window w '$a))"; echo "(define (popup-mark-$a) (popup-marked-window '$a))"; echo "(define-command 'mark-window-$a mark-window-$a #:spec \"%W\")"; echo "(define-command 'popup-mark-$a popup-mark-$a)"; done
; ) | sort -r


(define (move-resize-window-screen w) (move-resize-window-useful w 'screen))
(define (move-resize-window-botleft w) (move-resize-window-useful w 'botleft))
(define (move-resize-window-botpan w) (move-resize-window-useful w 'botpan))
(define (move-resize-window-botright w) (move-resize-window-useful w 'botright))
(define (move-resize-window-bot w) (move-resize-window-useful w 'bot))
(define (move-resize-window-butleftpan w) (move-resize-window-useful w 'butleftpan))
(define (move-resize-window-butleftrightpan w) (move-resize-window-useful w 'butleftrightpan))
(define (move-resize-window-butrightpan w) (move-resize-window-useful w 'butrightpan))
(define (move-resize-window-buttopbotpan w) (move-resize-window-useful w 'buttopbotpan))
(define (move-resize-window-leftpan w) (move-resize-window-useful w 'leftpan))
(define (move-resize-window-left w) (move-resize-window-useful w 'left))
(define (move-resize-window-rightpan w) (move-resize-window-useful w 'rightpan))
(define (move-resize-window-right w) (move-resize-window-useful w 'right))
(define (move-resize-window-topleft w) (move-resize-window-useful w 'topleft))
(define (move-resize-window-toppan w) (move-resize-window-useful w 'toppan))
(define (move-resize-window-topright w) (move-resize-window-useful w 'topright))
(define (move-resize-window-topthreequart w) (move-resize-window-useful w 'topthreequart))
(define (move-resize-window-top w) (move-resize-window-useful w 'top))

(define (move-resize-window-pos1 w) (move-resize-window-useful w 'pos1))
(define (move-resize-window-pos2 w) (move-resize-window-useful w 'pos2))
(define (move-resize-window-pos3 w) (move-resize-window-useful w 'pos3))
(define (move-resize-window-pos4 w) (move-resize-window-useful w 'pos4))
(define (move-resize-window-pos5 w) (move-resize-window-useful w 'pos5))
(define (move-resize-window-pos6 w) (move-resize-window-useful w 'pos6))
(define (move-resize-window-pos7 w) (move-resize-window-useful w 'pos7))
(define (move-resize-window-pos8 w) (move-resize-window-useful w 'pos8))
(define (move-resize-window-pos9 w) (move-resize-window-useful w 'pos9))

(define-command 'move-resize-window-pos1 move-resize-window-pos1 #:spec "%W")
(define-command 'move-resize-window-pos2 move-resize-window-pos2 #:spec "%W")
(define-command 'move-resize-window-pos3 move-resize-window-pos3 #:spec "%W")
(define-command 'move-resize-window-pos4 move-resize-window-pos4 #:spec "%W")
(define-command 'move-resize-window-pos5 move-resize-window-pos5 #:spec "%W")
(define-command 'move-resize-window-pos6 move-resize-window-pos6 #:spec "%W")
(define-command 'move-resize-window-pos7 move-resize-window-pos7 #:spec "%W")
(define-command 'move-resize-window-pos8 move-resize-window-pos8 #:spec "%W")
(define-command 'move-resize-window-pos9 move-resize-window-pos9 #:spec "%W")

(define-command 'move-resize-window-screen move-resize-window-screen #:spec "%W")
(define-command 'move-resize-window-botleft move-resize-window-botleft #:spec "%W")
(define-command 'move-resize-window-bot move-resize-window-bot #:spec "%W")
(define-command 'move-resize-window-botpan move-resize-window-botpan #:spec "%W")
(define-command 'move-resize-window-botright move-resize-window-botright #:spec "%W")
(define-command 'move-resize-window-butleftpan move-resize-window-butleftpan #:spec "%W")
(define-command 'move-resize-window-butleftrightpan move-resize-window-butleftrightpan #:spec "%W")
(define-command 'move-resize-window-butrightpan move-resize-window-butrightpan #:spec "%W")
(define-command 'move-resize-window-buttopbotpan move-resize-window-buttopbotpan #:spec "%W")
(define-command 'move-resize-window-left move-resize-window-left #:spec "%W")
(define-command 'move-resize-window-leftpan move-resize-window-leftpan #:spec "%W")
(define-command 'move-resize-window-right move-resize-window-right #:spec "%W")
(define-command 'move-resize-window-rightpan move-resize-window-rightpan #:spec "%W")
(define-command 'move-resize-window-topleft move-resize-window-topleft #:spec "%W")
(define-command 'move-resize-window-top move-resize-window-top #:spec "%W")
(define-command 'move-resize-window-toppan move-resize-window-toppan #:spec "%W")
 (define-command 'move-resize-window-topright move-resize-window-topright #:spec "%W")
(define-command 'move-resize-window-topthreequart move-resize-window-topthreequart #:spec "%W")

;for a in a b c d e f g h i j k l m n o p q r s t u v w x y z; do echo "(define (mark-window-$a w) (mark-window w '$a))"; echo "(define (popup-mark-$a) (popup-marked-window '$a))"; echo "(define-command 'mark-window-$a mark-window-$a #:spec \"%W\")"; echo "(define-command 'popup-mark-$a popup-mark-$a)"; done

(define (mark-window-a w) (mark-window w 'a))
(define (popup-mark-a) (popup-marked-window 'a))
(define-command 'mark-window-a mark-window-a #:spec "%W")
(define-command 'popup-mark-a popup-mark-a)
(define (mark-window-b w) (mark-window w 'b))
(define (popup-mark-b) (popup-marked-window 'b))
(define-command 'mark-window-b mark-window-b #:spec "%W")
(define-command 'popup-mark-b popup-mark-b)
(define (mark-window-c w) (mark-window w 'c))
(define (popup-mark-c) (popup-marked-window 'c))
(define-command 'mark-window-c mark-window-c #:spec "%W")
(define-command 'popup-mark-c popup-mark-c)
(define (mark-window-d w) (mark-window w 'd))
(define (popup-mark-d) (popup-marked-window 'd))
(define-command 'mark-window-d mark-window-d #:spec "%W")
(define-command 'popup-mark-d popup-mark-d)
(define (mark-window-e w) (mark-window w 'e))
(define (popup-mark-e) (popup-marked-window 'e))
(define-command 'mark-window-e mark-window-e #:spec "%W")
(define-command 'popup-mark-e popup-mark-e)
(define (mark-window-f w) (mark-window w 'f))
(define (popup-mark-f) (popup-marked-window 'f))
(define-command 'mark-window-f mark-window-f #:spec "%W")
(define-command 'popup-mark-f popup-mark-f)
(define (mark-window-g w) (mark-window w 'g))
(define (popup-mark-g) (popup-marked-window 'g))
(define-command 'mark-window-g mark-window-g #:spec "%W")
(define-command 'popup-mark-g popup-mark-g)
(define (mark-window-h w) (mark-window w 'h))
(define (popup-mark-h) (popup-marked-window 'h))
(define-command 'mark-window-h mark-window-h #:spec "%W")
(define-command 'popup-mark-h popup-mark-h)
(define (mark-window-i w) (mark-window w 'i))
(define (popup-mark-i) (popup-marked-window 'i))
(define-command 'mark-window-i mark-window-i #:spec "%W")
(define-command 'popup-mark-i popup-mark-i)
(define (mark-window-j w) (mark-window w 'j))
(define (popup-mark-j) (popup-marked-window 'j))
(define-command 'mark-window-j mark-window-j #:spec "%W")
(define-command 'popup-mark-j popup-mark-j)
(define (mark-window-k w) (mark-window w 'k))
(define (popup-mark-k) (popup-marked-window 'k))
(define-command 'mark-window-k mark-window-k #:spec "%W")
(define-command 'popup-mark-k popup-mark-k)
(define (mark-window-l w) (mark-window w 'l))
(define (popup-mark-l) (popup-marked-window 'l))
(define-command 'mark-window-l mark-window-l #:spec "%W")
(define-command 'popup-mark-l popup-mark-l)
(define (mark-window-m w) (mark-window w 'm))
(define (popup-mark-m) (popup-marked-window 'm))
(define-command 'mark-window-m mark-window-m #:spec "%W")
(define-command 'popup-mark-m popup-mark-m)
(define (mark-window-n w) (mark-window w 'n))
(define (popup-mark-n) (popup-marked-window 'n))
(define-command 'mark-window-n mark-window-n #:spec "%W")
(define-command 'popup-mark-n popup-mark-n)
(define (mark-window-o w) (mark-window w 'o))
(define (popup-mark-o) (popup-marked-window 'o))
(define-command 'mark-window-o mark-window-o #:spec "%W")
(define-command 'popup-mark-o popup-mark-o)
(define (mark-window-p w) (mark-window w 'p))
(define (popup-mark-p) (popup-marked-window 'p))
(define-command 'mark-window-p mark-window-p #:spec "%W")
(define-command 'popup-mark-p popup-mark-p)
(define (mark-window-q w) (mark-window w 'q))
(define (popup-mark-q) (popup-marked-window 'q))
(define-command 'mark-window-q mark-window-q #:spec "%W")
(define-command 'popup-mark-q popup-mark-q)
(define (mark-window-r w) (mark-window w 'r))
(define (popup-mark-r) (popup-marked-window 'r))
(define-command 'mark-window-r mark-window-r #:spec "%W")
(define-command 'popup-mark-r popup-mark-r)
(define (mark-window-s w) (mark-window w 's))
(define (popup-mark-s) (popup-marked-window 's))
(define-command 'mark-window-s mark-window-s #:spec "%W")
(define-command 'popup-mark-s popup-mark-s)
(define (mark-window-t w) (mark-window w 't))
(define (popup-mark-t) (popup-marked-window 't))
(define-command 'mark-window-t mark-window-t #:spec "%W")
(define-command 'popup-mark-t popup-mark-t)
(define (mark-window-u w) (mark-window w 'u))
(define (popup-mark-u) (popup-marked-window 'u))
(define-command 'mark-window-u mark-window-u #:spec "%W")
(define-command 'popup-mark-u popup-mark-u)
(define (mark-window-v w) (mark-window w 'v))
(define (popup-mark-v) (popup-marked-window 'v))
(define-command 'mark-window-v mark-window-v #:spec "%W")
(define-command 'popup-mark-v popup-mark-v)
(define (mark-window-w w) (mark-window w 'w))
(define (popup-mark-w) (popup-marked-window 'w))
(define-command 'mark-window-w mark-window-w #:spec "%W")
(define-command 'popup-mark-w popup-mark-w)
(define (mark-window-x w) (mark-window w 'x))
(define (popup-mark-x) (popup-marked-window 'x))
(define-command 'mark-window-x mark-window-x #:spec "%W")
(define-command 'popup-mark-x popup-mark-x)
(define (mark-window-y w) (mark-window w 'y))
(define (popup-mark-y) (popup-marked-window 'y))
(define-command 'mark-window-y mark-window-y #:spec "%W")
(define-command 'popup-mark-y popup-mark-y)
(define (mark-window-z w) (mark-window w 'z))
(define (popup-mark-z) (popup-marked-window 'z))
(define-command 'mark-window-z mark-window-z #:spec "%W")
(define-command 'popup-mark-z popup-mark-z)
(define (mark-window-0 w) (mark-window w 'n0))
(define (mark-window-1 w) (mark-window w 'n1))
(define (mark-window-2 w) (mark-window w 'n2))
(define (mark-window-3 w) (mark-window w 'n3))
(define (mark-window-4 w) (mark-window w 'n4))
(define (mark-window-5 w) (mark-window w 'n5))
(define (mark-window-6 w) (mark-window w 'n6))
(define (mark-window-7 w) (mark-window w 'n7))
(define (mark-window-8 w) (mark-window w 'n8))
(define (mark-window-9 w) (mark-window w 'n9))
(define (mark-window-a w) (mark-window w 'a))
(define (mark-window-e w) (mark-window w 'e))
(define (mark-window-i w) (mark-window w 'i))
(define (mark-window-o w) (mark-window w 'o))
(define (popup-mark-0) (popup-marked-window 'n0))
(define (popup-mark-1) (popup-marked-window 'n1))
(define (popup-mark-2) (popup-marked-window 'n2))
(define (popup-mark-3) (popup-marked-window 'n3))
(define (popup-mark-4) (popup-marked-window 'n4))
(define (popup-mark-5) (popup-marked-window 'n5))
(define (popup-mark-6) (popup-marked-window 'n6))
(define (popup-mark-7) (popup-marked-window 'n7))
(define (popup-mark-8) (popup-marked-window 'n8))
(define (popup-mark-9) (popup-marked-window 'n9))
(define (popup-mark-a) (popup-marked-window 'a))
(define (popup-mark-e) (popup-marked-window 'e))
(define (popup-mark-i) (popup-marked-window 'i))
(define (popup-mark-o) (popup-marked-window 'o))

(define-command 'mark-window-0 mark-window-0 #:spec "%W")
(define-command 'mark-window-1 mark-window-1 #:spec "%W")
(define-command 'mark-window-2 mark-window-2 #:spec "%W")
(define-command 'mark-window-3 mark-window-3 #:spec "%W")
(define-command 'mark-window-4 mark-window-4 #:spec "%W")
(define-command 'mark-window-5 mark-window-5 #:spec "%W")
(define-command 'mark-window-6 mark-window-6 #:spec "%W")
(define-command 'mark-window-7 mark-window-7 #:spec "%W")
(define-command 'mark-window-8 mark-window-8 #:spec "%W")
(define-command 'mark-window-9 mark-window-9 #:spec "%W")
(define-command 'mark-window-a mark-window-a #:spec "%W")
(define-command 'mark-window-e mark-window-e #:spec "%W")
(define-command 'mark-window-i mark-window-i #:spec "%W")
(define-command 'mark-window-o mark-window-o #:spec "%W")
(define-command 'popup-mark-0 popup-mark-0)
(define-command 'popup-mark-1 popup-mark-1)
(define-command 'popup-mark-2 popup-mark-2)
(define-command 'popup-mark-3 popup-mark-3)
(define-command 'popup-mark-4 popup-mark-4)
(define-command 'popup-mark-5 popup-mark-5)
(define-command 'popup-mark-6 popup-mark-6)
(define-command 'popup-mark-7 popup-mark-7)
(define-command 'popup-mark-8 popup-mark-8)
(define-command 'popup-mark-9 popup-mark-9)
(define-command 'popup-mark-a popup-mark-a)
(define-command 'popup-mark-e popup-mark-e)
(define-command 'popup-mark-i popup-mark-i)
(define-command 'popup-mark-o popup-mark-o)

;;(define-match-window-property 'markmark 'other (lambda () (list 'symbol 'a 'b 'c 'd 'e 'f 'g 'h 'i 'j 'k 'l 'm 'n 'o 'p 'q 'r 's 't 'u 'v 'w 'x 'y 'z 'n0 'n1 'n2 'n3 'n4 'n5 'n6 'n7 'n8 'n9)))
;;(define-match-window-setter 'markmark
;;  (lambda (w prop value)
;;    (declare (unused prop))
;;    (window-put w 'markmark value)))
;;(define-match-window-property 'submark  'other (lambda () (list 'symbol 'a 'b ';;c 'd 'e 'f 'g 'h 'i 'j 'k 'l 'm 'n 'o 'p 'q 'r 's 't 'u 'v 'w 'x 'y 'z 'n0 'n1 ;;'n2 'n3 'n4 'n5 'n6 'n7 'n8 'n9)))
;;(define-match-window-setter 'submark
;;  (lambda (w prop value)
;;    (declare (unused prop))
;;    (window-put w 'submark value)))

;;(define-match-window-property 'mposition 'other (lambda () (list 'symbol 'screen 'top 'left 'right 'bot 'leftpan 'rightpan 'topleft 'topright 'botleft 'botright)))
;;(define-match-window-setter 'mposition
  ;;(lambda (w prop value)
    ;;(declare (unused prop))
    ;;(move-resize-window-useful w value)))
